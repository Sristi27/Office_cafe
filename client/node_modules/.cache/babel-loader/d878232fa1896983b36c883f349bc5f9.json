{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sristichowdhury/Desktop/projects/stack-hack/client/src/components/Cafepage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport LoadingOverlay from 'react-loading-overlay';\nimport { Card, Col, Container, Row, Button } from \"react-bootstrap\";\nimport { MdDelete } from 'react-icons/md';\nimport CafeNav from \"./CafeNav\";\nimport { useParams, useLocation } from \"react-router-dom\";\nimport Navbar from \"./Navbar/Navbar\";\nimport './cafeStyles.css';\nimport CafePageItem from \"./CafePageItem\";\nimport { connect } from 'react-redux';\n\nconst Cafepage = ({\n  addItemToCart\n}) => {\n  _s();\n\n  //get extra data passed from success page\n  const location = useLocation();\n  const {\n    id\n  } = useParams(); //  console.log(id)\n\n  const [cart, setCart] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [foodItems, setFoodItems] = useState(location.state ? location.state.items.items : []);\n  const [total, setTotal] = useState(0);\n  const [paymentMode, setPaymentMode] = useState('cash'); //card states\n\n  const [cardname, setCardName] = useState('ABC');\n  const [expiry, setExpiry] = useState('12/24');\n  const [cvv, setCvv] = useState('033');\n  const [cardnumber, setCardNumber] = useState(''); //calls the route on the backend which saves the food array to the database and returns the items.\n  //add to cart functionality is implemented\n  // const addToCart = (itemName,price,quantity) =>\n  // {\n  //    //if cart is not empty then we check if the added item is already present in the cafe or not.\n  //    if(cart.length!=0)\n  //    {\n  //       var item=cart.find(({ name }) => name === itemName)\n  //       //If present,we simply increase the quantity and add up the price\n  //       if(item) \n  //       {\n  //         item.quantity+=1;\n  //         item.price+=price;\n  //         setTotal(total+price)\n  //         setCart(cart)\n  //       }\n  //       //else we create a new item and push it to the existing array\n  //       else \n  //       {\n  //         setCart([...cart,{name:itemName,price,quantity}])\n  //         setTotal(total+price);\n  //       }\n  //    }\n  //    //else we create a new item and push into the empty array\n  //    else\n  //    {\n  //     setCart([...cart,{name:itemName,price,quantity}])\n  //     setTotal(total+price);\n  //    }\n  //    localStorage.setItem('cart',JSON.stringify(cart))\n  // }\n\n  const addToCart = id => {\n    addItemToCart(id);\n  }; //loading spinner\n\n\n  const Spin = ({\n    message\n  }) => {\n    return /*#__PURE__*/_jsxDEV(LoadingOverlay, {\n      active: loading,\n      spinner: true,\n      text: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  }; //implemented the delete functionality using this function\n  // const deleteFromCart = (itemName) =>\n  // {\n  //     var item=cart.find(({name})=>name===itemName)\n  //     var newcart=cart.filter(item=>item.name!=itemName);\n  //     console.log(newcart)\n  //     setTotal(total-item.price);\n  //     setCart(newcart);\n  // }\n  //completely clears the cart if there are existing items\n  // const clearCart = () =>\n  // {\n  //    setCart([]);\n  //    setTotal(0);\n  // }\n  //This function starts a timer for an interval(takeaway time for the order)\n\n\n  const pay = () => {\n    setLoading(true);\n    alert(`Payment Processing with ${paymentMode}!`);\n    setTimeout(() => {\n      setLoading(false);\n      clearCart();\n      alert(\"Payment Completed...Enjoy your meal!\");\n    }, 3000);\n  }; //displays cart Items by map over items in the cart\n\n\n  const CartDiv = ({\n    item\n  }) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-between'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: [/*#__PURE__*/_jsxDEV(MdDelete, {\n          onClick: () => deleteFromCart(item.name)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 5\n        }, this), item.name, \"(\", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: 'gray',\n            fontSize: '15px'\n          },\n          children: \"qty:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }, this), item.quantity, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: [\"Rs.\", item.price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 5\n    }, this);\n  }; //renders food items grid and cart box in a flex display\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cafe-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home-container\",\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        userId: id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"banner\",\n        id: \"banner\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cafe-content\",\n          children: [foodItems.length == 0 && loading ? /*#__PURE__*/_jsxDEV(Spin, {\n            message: \"Loading Cafe Menu\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 39\n          }, this) : '', /*#__PURE__*/_jsxDEV(Container, {\n            style: {\n              margin: '10px auto'\n            },\n            children: /*#__PURE__*/_jsxDEV(Row, {\n              children: foodItems.length != 0 && foodItems.map(item => {\n                return /*#__PURE__*/_jsxDEV(CafePageItem, {\n                  item: item,\n                  addToCart: addToCart\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 22\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Cafepage, \"PdhX2zzzI7yXY20DpHB+Bjy6FJY=\", false, function () {\n  return [useLocation, useParams];\n});\n\n_c = Cafepage;\n\nconst mapStatetoProps = state => {\n  return {\n    items: state.cart\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addItemToCart: id => {\n      dispatch({\n        type: \"ADD_TO_CART\",\n        payload: id\n      });\n    }\n  };\n};\n\nexport default connect(mapStatetoProps, mapDispatchToProps)(Cafepage);\n\nvar _c;\n\n$RefreshReg$(_c, \"Cafepage\");","map":{"version":3,"sources":["/Users/sristichowdhury/Desktop/projects/stack-hack/client/src/components/Cafepage.jsx"],"names":["React","useEffect","useState","LoadingOverlay","Card","Col","Container","Row","Button","MdDelete","CafeNav","useParams","useLocation","Navbar","CafePageItem","connect","Cafepage","addItemToCart","location","id","cart","setCart","loading","setLoading","foodItems","setFoodItems","state","items","total","setTotal","paymentMode","setPaymentMode","cardname","setCardName","expiry","setExpiry","cvv","setCvv","cardnumber","setCardNumber","addToCart","Spin","message","pay","alert","setTimeout","clearCart","CartDiv","item","display","justifyContent","deleteFromCart","name","color","fontSize","quantity","price","length","margin","map","mapStatetoProps","mapDispatchToProps","dispatch","type","payload"],"mappings":"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","sourcesContent":["import React,{useEffect, useState} from \"react\";\nimport LoadingOverlay from 'react-loading-overlay';\nimport { Card, Col, Container,Row,Button} from \"react-bootstrap\";\nimport {MdDelete} from 'react-icons/md';\nimport CafeNav from \"./CafeNav\";\nimport { useParams,useLocation } from \"react-router-dom\";\nimport Navbar from \"./Navbar/Navbar\";\nimport './cafeStyles.css'\nimport CafePageItem from \"./CafePageItem\";\nimport {connect} from 'react-redux'\n\n\n\nconst Cafepage = ({addItemToCart}) => {\n\n//get extra data passed from success page\nconst location = useLocation()\n\nconst {id}=useParams();\n\n//  console.log(id)\n\nconst [cart,setCart]=useState([]);\nconst [loading,setLoading]=useState(true)\nconst [foodItems,setFoodItems]=useState(location.state?location.state.items.items:[]);\nconst [total,setTotal]=useState(0);\nconst [paymentMode,setPaymentMode]=useState('cash');\n\n\n//card states\nconst [cardname,setCardName]=useState('ABC');\nconst [expiry,setExpiry]=useState('12/24');\nconst [cvv,setCvv]=useState('033');\nconst [cardnumber,setCardNumber]=useState('');\n\n\n\n\n  //calls the route on the backend which saves the food array to the database and returns the items.\n \n//add to cart functionality is implemented\n// const addToCart = (itemName,price,quantity) =>\n// {\n\n//    //if cart is not empty then we check if the added item is already present in the cafe or not.\n   \n//    if(cart.length!=0)\n//    {\n//       var item=cart.find(({ name }) => name === itemName)\n\n//       //If present,we simply increase the quantity and add up the price\n//       if(item) \n//       {\n//         item.quantity+=1;\n//         item.price+=price;\n//         setTotal(total+price)\n//         setCart(cart)\n        \n//       }\n//       //else we create a new item and push it to the existing array\n//       else \n//       {\n//         setCart([...cart,{name:itemName,price,quantity}])\n//         setTotal(total+price);\n//       }\n//    }\n\n//    //else we create a new item and push into the empty array\n//    else\n//    {\n//     setCart([...cart,{name:itemName,price,quantity}])\n//     setTotal(total+price);\n//    }\n\n\n//    localStorage.setItem('cart',JSON.stringify(cart))\n   \n// }\n \n\n\nconst addToCart = (id) =>\n{\n  addItemToCart(id)\n}\n\n//loading spinner\nconst Spin = ({message}) =>\n{\n   return (\n      <LoadingOverlay\n      active={loading}\n      spinner\n      text={message}\n      >\n    </LoadingOverlay>\n   )\n}\n\n\n//implemented the delete functionality using this function\n// const deleteFromCart = (itemName) =>\n// {\n//     var item=cart.find(({name})=>name===itemName)\n//     var newcart=cart.filter(item=>item.name!=itemName);\n//     console.log(newcart)\n//     setTotal(total-item.price);\n//     setCart(newcart);\n// }\n\n\n\n\n//completely clears the cart if there are existing items\n// const clearCart = () =>\n// {\n//    setCart([]);\n//    setTotal(0);\n// }\n\n\n\n//This function starts a timer for an interval(takeaway time for the order)\nconst pay = () =>\n{\n   setLoading(true);\n   alert(`Payment Processing with ${paymentMode}!`);\n   setTimeout(() => {\n     setLoading(false)\n     clearCart();\n\n     alert(\"Payment Completed...Enjoy your meal!\");\n   }, 3000);\n}\n\n\n\n  \n//displays cart Items by map over items in the cart\nconst CartDiv = ({item}) =>\n{\n   return (\n    <div  style={{display:'flex',justifyContent:'space-between'}}>\n    <h5>\n    <MdDelete onClick={()=>deleteFromCart(item.name)}/>\n    {item.name}(<span style={{color:'gray',fontSize:'15px'}}>qty:</span>{item.quantity})\n    </h5>\n    <h5>Rs.{item.price}</h5>\n    </div>\n\n   )\n}\n\n\n\n\n//renders food items grid and cart box in a flex display\n  return (\n    <div className=\"cafe-container\">\n      <div className=\"home-container\">\n        <Navbar userId={id}/>\n      {/* <CafeNav id={id}/> */}\n      <section className=\"banner\" id=\"banner\">\n        <div className=\"cafe-content\">\n      {foodItems.length==0 && loading?<Spin message=\"Loading Cafe Menu\"/>:''}\n      {/* {foodItems && loading?<Spin message=\"Processing your payment\"/>:''} */}\n        <Container style={{margin:'10px auto'}}>\n          <Row>\n            {/* <Col xs={8}> */}\n            {/* <Row> */}\n              {foodItems.length!=0 && foodItems.map((item)=>\n                {\n                  return(\n                     <CafePageItem item={item}\n                     addToCart={addToCart}\n                    />\n                  )\n                })}\n            \n              {/* </Row> */}\n              {/* </Col> */}\n              {/* <Col xs={4}>\n                <Card>\n                  <Card.Title><h3 style={{textAlign:'center'}}>Cart</h3></Card.Title>\n                  <Card.Body>\n                  <Card.Text>\n\n                {cart.length!=0 ? \n                cart.map((item)=>\n                {\n                   return (\n                     <CartDiv item={item}/>\n                   )\n                }):<Empty/>}   \n\n                  </Card.Text>\n                  </Card.Body>\n                  <Card.Footer>\n                    <h4 style={{display:'flex',justifyContent:'space-between'}}>\n                      Total:<span>Rs.{total}</span></h4>\n                    <br/>\n                    {cart.length!=0?\n                    <div  style={{display:'flex',justifyContent:'space-between'}}>\n                    Pay using: \n                    <div>\n                    <label style={{marginRight:'10px'}}>\n                      \n                      <input type=\"radio\" name=\"pay\" \n                                 value='cash'\n                                 checked={paymentMode=='cash'} \n                                 onChange={()=>setPaymentMode('cash')}/>\n                                 Cash</label>\n\n\n                    {/* <label>\n                      <input type=\"radio\" name=\"pay\" \n                                 value='card'\n                                 checked={paymentMode=='card'} \n                                 onChange={()=>setPaymentMode('card')}/>\n                                 Card</label> */}\n                    {/* </div>\n                  </div>\n                  :''}\n\n                  <br/>\n\n                \n                  {cart.length!=0?<Button onClick={clearCart}>Empty Cart</Button>:''}\n                  <Button style={{float:'right'}}\n                    onClick={pay} disabled={cart.length==0}\n                    >Proceed to Pay</Button>\n                  </Card.Footer>\n                </Card>\n              </Col> */}\n          </Row>\n        </Container>\n        </div>\n        </section>\n        </div>\n    </div>\n  );\n};\n\n\n\n\n\nconst mapStatetoProps=(state)=>\n{\n\n  \n  return {\n    items: state.cart\n     }\n\n}\n\n\n\nconst mapDispatchToProps= (dispatch)=>{\n    \n  return{\n      addItemToCart: (id)=>{\n         dispatch({ \n        type: \"ADD_TO_CART\", \n        payload:id\n      });\n    }\n\n  }\n}\n\nexport default  connect(mapStatetoProps,mapDispatchToProps)(Cafepage)"]},"metadata":{},"sourceType":"module"}